Program -> ImportDeclaration, ClassDeclaration, EOF

ImportDeclaration -> { "import" Identifier {"." Identifier} ";" }

ClassDeclaration -> "class" Identifier ["extends" Identifier]
                    "{"
                        {VarDeclaration}
                        {MethodDeclaration}
                    "}"

VarDeclaration -> Type Identifier ";"

MethodDeclaration -> "public" Type Identifier "(" [Type Identifier] {"," Type Identifier} ] ")"
                      "{"
                        {VarDeclaration}
                        {Statement}
                        "return" Expression ";"
                      "}"
                      |
                      "public" "static" "void" "main" "(" "String" "[" "]" Identifier ")"
                      "{"
                        {VarDeclaration}
                        {Statement}
                      "}"

Type -> "int" "[" "]"
        |   "boolean"
        |   "int"
        |   Identifier

Statement ->    "{" {Statement} "}"
                |   "if" "(" Expression ")" Statement "else" Statement
                |   "while" "(" Expression ")" Statement
                |   Expression ";"
                |   Identifier "=" Expression ";"
                |   Identifier "[" Expression "]" "=" Expression ";"

Expression ->   Expression ( "&&" | "<" | "+" | "-" | "*" | "/") Expression
                    |    Expression "[" Expression "]"
                    |    Expression "." "length"
                    |    "." Identifier "(" [ Expression { "," Expression } ] ")"
                    |    Integer
                    |    "true"
                    |    "false"
                    |    Identifier
                    |    "this"
                    |    "new" "int" "[" Expression "]"
                    |    "new" Identifier "(" ")"
                    |    "!" Expression
                    |    "(" Expression ")"

Expression ->
    (
        Integer
        |   "true"
        |   "false"
        |   "this"
        |   "new" "int" "[" Expression "]"
        |   "new" Identifier "(" ")"
        |   "!" Expression
        |   "(" Expression ")"
        |   Identifier>
    ) ExpressionTail


ExpressionTail ->
    [
        (Op Expression
        |   "[" Expression "]"
        |   "." "length"
        |   "." Identifier "(" [Expression ("," Expression)*] ")"
    ) ExpressionTail()]

Op ->   && | < | + | - | * | /