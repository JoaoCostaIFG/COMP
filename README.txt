**GROUP: 1C

 

(Names, numbers, self assessment, and contribution of the members of the group to the project according to:)
NAME1: Ana Inês Oliveira de Barros, NR1: 201806593, GRADE1: <0 to 20 value>, CONTRIBUTION1: <0 to 100 %>
NAME2: João de Jesus Costa, NR2: 201806560, GRADE2: <0 to 20 value>, CONTRIBUTION2: <0 to 100 %>
NAME3: João Lucas Silva Martins, NR3: 20180643, GRADE3: <0 to 20 value>, CONTRIBUTION3: <0 to 100 %>
NAME4: Ricardo Jorge Cruz Fontão, NR4: 201806317, GRADE4: <0 to 20 value>, CONTRIBUTION4: <0 to 100 %>
...
(Note that the sum of the CONTRIBUTION? values must be 100 %)

 

GLOBAL Grade of the project: 20

 

** SUMMARY:

Our tool compiles java-- code (jmm) which is a java language subset. It optimizes the code and compiles it to jasmin saving it in a file.
Its main features are : 
    - Semantic analysis
    - Syntactic analysis
    - Code optimizations

**DEALING WITH SYNTACTIC ERRORS: 

 We store the line and column of every node using a hook.
 When encountering an error outside an while loop, it is reported with the corresponding line and column and the analysis stops.
 Errors inside while loops are accumulated, because the analysis doesn't stop, and reported at the end of the parsing.
 
**SEMANTIC ANALYSIS: 

 Semantic rules implemented: 

    Type verifications in expressions: 
        - Operands must have the same type;
        - It is not possible to use arrays directly in arithmetic operations (e.g. array1 + array2);
        - Array access only applies to arrays;
        - The array index on an array access must be an integer;
        - The type of an assignee and the type of an assigned must be equal;
        - Boolean operations must only use boolean operators (&&, <, !);
        - Conditional expressions must result in a boolean value;
    
    Method Verifications:
        - Both the method and its target must exist; 
        - Number of arguments in the invocation call must be equal to the number of parameters in the method's declaration (method overloading is possible);
        - The arguments type must be equal to the parameters type;
    
    Extras:
        - Arrays must be one dimensional
        - Class parameters cannot be used in a static context (e.g.: inside main function);
        - Variables must be initialized before being used;
        - Arrays need to be initialized before we can use their indices;
        - There can only be one main function;
        - Variables must be declared before being used/assigned a value;
        - .length can only be used in arrays;
        - Methods can only be called on class instances and statically from imports;
        - Not a statement error, e.g.: a line containing only 1 + 1; isn't a valid statement


**CODE GENERATION: (describe how the code generation of your tool works and identify the possible problems your tool has regarding code generation.)

 Our code generation takes as input the OLLIR generated by the semantic analysis and outputs the jasmin code. 

Problems:
    - When allocating registers, our tool does not perform spilling.

**TASK DISTRIBUTION: (Identify the set of tasks done by each member of the project. You can divide this by checkpoint it if helps)

 O IRAO FEZ TUDO mas ele diz q é benevolente


**PROS: 
 - Register allocation 
 - Constant propagation
 - While loop converted to "do while" loop
 - When using constant propagation and constant folding, we apply the propagation to "if" and "while"'s bodies when possible. TODO: exemplo fixe 
 

**CONS: 
 - When using constant propagation and constant folding together, sometimes we are left with a constant being assigned to a register, which is never used. We don't remove these extra lines of code.
