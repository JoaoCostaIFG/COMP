options
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(JmmTree)


public class JmmTree
{
    public static void main(String args[]) throws ParseException {
      	System.out.println("Write an arithmetic expression:");
		JmmTree jmmTree = new JmmTree(System.in);
		SimpleNode root = jmmTree.Expression(); // returns reference to root node
        	
		root.dump(""); // prints the tree on the screen

		//System.out.println("Expression value: "+myCalc.eval(root));
    }
	
}

PARSER_END(JmmTree)

SKIP :
{
	" " | "\r" | "\t"
}

TOKEN:
{
    <SPAR: "("> | <EPAR: ")">
    |   <SBRAK: "["> | <EBRAK: "]" >
    |   <SCURL: "{"> | <ECURL: "}">
    |   <NEW: "new">
    |   <THIS: "this">
    |   <TRUE: "true"> | <FALSE: "false">
    |   <DOT: "."> | <COMMA: ",">
    |   <NOT: "!"> | <AND: "&&"> | <LESSTHAN: "<">
    |   <ADD: "+"> | <SUB: "-"> | <MULT: "*"> | <DIV: "/">
    |   <ATTRIB: "=">
    |   <SEMICOLON: ";">
    |   <IF: "if"> | <ELSE: "else">
    |   <WHILE: "while">
    |   <BOOL: "boolean"> | <INT: "int">
    |   <VOID: "void">
    |   <PUBLIC: "public"> | <PRIVATE: "private"> | <STATIC: "static">
    |   <MAIN: "main"> | <STRING: "String">
    |   <CLASS: "class"> | <EXTENDS: "extends">
    |   <IMPORT: "import">
    |   <RET: "return">
    |   <LEN: "length">
    |	<INTEGER: (["0"-"9"])+>
	|   <LF: "\n">
}

SimpleNode Expression(): {}
{
   Expr1() <LF> <EOF>  {return jjtThis;} // Java code inside brackets
}

void Expr1() #void: {}
{
   Expr2(1) [
   	("+" Expr2(1) #Add(2)
   	| "-" Expr2(1) #Sub(2)
   	)

   ]
}

void Expr2(int sign) #void: {} // 1: positive; -1: negative, because of the ‘-‘ unitary operator
{
   Expr3(sign)  [
   ("*" Expr3(1) #Mul(2)
   | "/" Expr3(1) #Div(2)
   )

   ]
}

void Expr3(int sign) #void: {Token t;}
{
    t=<INTEGER> {  jjtThis.val = sign *Integer.parseInt(t.image); } #Term
    | "-" Expr3(-1)
    | "(" Expr1() ")"
}
