/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Calculator.jj */
/*@egen*/options
{
                           // don't generate nodes by default
 LOOKAHEAD = 2;
}
PARSER_BEGIN(Calculator)
import java.util.HashMap;import java.util.Map;public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/
    public static void main(String[] args) throws ParseException {
        System.out.println("Parser for a calculator that accepts expressions with integers, +,-,*,/,(,and ).");
        System.out.println("Write an arithmetic expression:");
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Expression(); // returns reference to root node
        root.dump(""); // prints the tree on the screen
        System.out.println("Expression value: " + root.eval());
    }
}
PARSER_END(Calculator)

SKIP :
{
" " | "\r" | "\t"
}

TOKEN:
{
    < SYMBOL: ["A"-"Z", "a"-"z"](["0"-"9", "A"-"Z", "a"-"z"])*>
    | < INTEGER: (["0"-"9"])+ >
    | < LF: "\n" >
    | <ENDEXPR: ";">
}

SimpleNode Expression()             : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    Expr0() (<ENDEXPR> Expr0())* <LF>/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ // Java code inside brackets
}

void Expr0() : {Token t; SimpleNode n;}
{
    // is assignment?
    (t=<SYMBOL>/*@bgen(jjtree) Symb */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTSYMB);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                }
/*@egen*/ {n = jjtn001; n.value = t.image;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/      
    "="
    Expr1(1)/*@bgen(jjtree) #Eq( 2) */
             {
               SimpleNode jjtn002 = new SimpleNode(JJTEQ);
               boolean jjtc002 = true;
               jjtree.openNodeScope(jjtn002);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn002,  2);
               jjtc002 = false;
             }
/*@egen*/ {n.val = jjtn002.eval();}/*@bgen(jjtree)*/
             } finally {
               if (jjtc002) {
                 jjtree.closeNodeScope(jjtn002,  2);
               }
             }
/*@egen*/       )
    | Expr1(1) // normal expr
}

void Expr1(int sign) : {}  // 1: positive; -1: negative
{
    Expr2(sign)
    ("+"/*@bgen(jjtree) #Add( 2) */
         {
           SimpleNode jjtn001 = new SimpleNode(JJTADD);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ Expr2(sign)/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/        
    | "-"/*@bgen(jjtree) #Sub( 2) */
          {
            SimpleNode jjtn002 = new SimpleNode(JJTSUB);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ Expr2(sign)/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/        )*
}

void Expr2(int sign) : {}
{
    // the Expr3 after *|/ don't take the sign because -1 * 1 = -1 and -1 * -1 = 1
    Expr3(sign)
    ("*"/*@bgen(jjtree) #Mul( 2) */
         {
           SimpleNode jjtn001 = new SimpleNode(JJTMUL);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
           }
         }
/*@egen*/        
    | "/"/*@bgen(jjtree) #Div( 2) */
          {
            SimpleNode jjtn002 = new SimpleNode(JJTDIV);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ Expr3(1)/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
            }
          }
/*@egen*/        )*
}

void Expr3(int sign) : {Token t;}
{
    t=<INTEGER>/*@bgen(jjtree) Term */
                {
                  SimpleNode jjtn001 = new SimpleNode(JJTTERM);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtc001 = false;
                }
/*@egen*/ {jjtn001.val = sign * Integer.parseInt(t.image);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                  }
                }
/*@egen*/      
    | t=<SYMBOL>/*@bgen(jjtree) Symb */
                 {
                   SimpleNode jjtn002 = new SimpleNode(JJTSYMB);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                 }
                 try {
/*@egen*//*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn002, true);
                   jjtc002 = false;
                 }
/*@egen*/ {jjtn002.value = t.image;}/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                   }
                 }
/*@egen*/      
    | "-" Expr3(-1)
    | "(" Expr1(sign) ")"
}