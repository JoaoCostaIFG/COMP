Program -> ImportDeclaration, ClassDeclaration, EOF

ImportDeclaration -> { "import" Identifier {"." Identifier} ";" }

ClassDeclaration -> "class" Identifier ["extends" Identifier]
                    "{"
                        ClassBody
                    "}"

ClassBody ->    {VarDeclaration}
                {MethodDeclaration}

MethodDeclaration ->  "public"
                      (Type Identifier "(" [Type Identifier] {"," Type Identifier} ] ")"
                      "{"
                        MethodBody
                        "return" Expression ";"
                      "}"
                      |
                      "static" "void" "main" "(" "String" "[" "]" Identifier ")"
                      "{"
                        MethodBody
                      "}")

MethodBody ->   {VarDeclaration} {Statement}

VarDeclaration -> Type Identifier ";"

Type -> "int" ["[" "]"]
        |   "boolean"
        |   Identifier

Statement ->    "{" {Statement} "}"
                |   "if" "(" Expression ")" Statement "else" Statement
                |   "while" "(" Expression ")" Statement
                |   [Identifier ["[" Expression "]"] "="] Expression ";"

Expression ->
    (
        Integer
        |   "true"
        |   "false"
        |   "this"
        |   "new" ("int" "[" Expression "]"
                    |   Identifier "(" ")")
        |   "!" Expression
        |   "(" Expression ")"
        |   Identifier>
    ) ExpressionTail

ExpressionTail ->
    [(ArithmeticExpression
    |   "[" Expression "]"
    |   ".length"
    |   "." Identifier "(" [Expression ("," Expression)*] ")")
    ) ExpressionTail()]

Op ->   && | < | + | - | * | /

Expression ->   LessThanExpression
                ("&&" LessThanExpression #And(2))*

LessThanExpression ->   ArithmeticExpression
                        ("<" ArithmeticExpression #LessThan(2))*

AdditiveExpression ->   MultiplicativeExpression
                        ("+" MultiplicativeExpression #Add(2)
                        | "-" MultiplicativeExpression #Sub(2))*

MultiplicativeExpression -> UnaryExpression
                            ("*" UnaryExpression #Mul(2)
                            | "/" UnaryExpression #Div(2))*

NotExpression ->    "!" NotExpression
                    | DotExpression

DotExpression ->    ArrayAccessExpression
                    (".length"
                    | "." DotExpansion)*

DotExpansion -> Identifier
                "("
                    [Expression ("," Expression)*]
                ")"

ArrayAccessExpression ->    ExpressionTerminal
                            ["[" Expression "]"]

ExpressionTerminal ->   "true"
                        | "false"
                        | "this"
                        | "(" Expression ")"
                        | "new" NewExpression
                        | Integer
                        | Identifier

NewExpression ->    "int" "[" Expression "]"
                    | Identifier "(" ")"

PRECEDENCE (less to more):
    &&
    <
    + -
    * /
    !
    [] .
    (Expr) new

Warning: Choice conflict in (...)* construct at line 159, column 5.
         Expansion nested within construct and expansion following construct
         have common prefixes, one of which is: <IDENTIFIER>
         Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in [...] construct at line 175, column 9.
         Expansion nested within construct and expansion following construct
         have common prefixes, one of which is: <IDENTIFIER>
         Consider using a lookahead of 2 or more for nested expansion.