From 141bc300c57c53da567a7050b2e60af3aae617b6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jo=C3=A3o=20Bispo?= <joaobispo@gmail.com>
Date: Tue, 18 May 2021 19:59:39 +0100
Subject: [PATCH] Adds two overloads for JasminResult.run() that accept inputs

---
 .../up/fe/comp/jmm/jasmin/JasminResult.java   | 57 ++++++++++++++++++-
 1 file changed, 54 insertions(+), 3 deletions(-)

diff --git a/src-lib/pt/up/fe/comp/jmm/jasmin/JasminResult.java b/src-lib/pt/up/fe/comp/jmm/jasmin/JasminResult.java
index 552398e..9936d26 100644
--- a/src-lib/pt/up/fe/comp/jmm/jasmin/JasminResult.java
+++ b/src-lib/pt/up/fe/comp/jmm/jasmin/JasminResult.java
@@ -1,10 +1,15 @@
 package pt.up.fe.comp.jmm.jasmin;
 
+import java.io.BufferedWriter;
 import java.io.File;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
+import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
+import java.util.function.Consumer;
 
 import pt.up.fe.comp.TestUtils;
 import pt.up.fe.comp.jmm.ollir.OllirResult;
@@ -12,12 +17,19 @@ import pt.up.fe.comp.jmm.report.Report;
 import pt.up.fe.specs.util.SpecsCollections;
 import pt.up.fe.specs.util.SpecsIo;
 import pt.up.fe.specs.util.SpecsSystem;
+import pt.up.fe.specs.util.system.OutputType;
+import pt.up.fe.specs.util.system.ProcessOutputAsString;
+import pt.up.fe.specs.util.system.StreamToString;
+import pt.up.fe.specs.util.utilities.StringLines;
 
 /**
  * A semantic analysis returns the analysed tree and the generated symbol table.
  */
 public class JasminResult {
 
+    private static Long HUMAN_DELAY_MS = 250l;
+    private static Long TIMEOUT_NS = 5_000_000_000l;
+
     private final String className;
     private final String jasminCode;
     private final List<Report> reports;
@@ -75,10 +87,12 @@ public class JasminResult {
      *            arguments for the Jasmin program
      * @param classpath
      *            additional paths for the classpath
+     * @param input
+     *            input to give to the program that will run
      * 
      * @return the output that is printed by the Jasmin program
      */
-    public String run(List<String> args, List<String> classpath) {
+    public String run(List<String> args, List<String> classpath, String input) {
         // Compile
         var classFile = compile();
 
@@ -99,9 +113,38 @@ public class JasminResult {
         command.add(classname);
         command.addAll(args);
 
-        var output = SpecsSystem.runProcess(command, true, true);
+        // Build process
+        ProcessBuilder builder = new ProcessBuilder(command);
+        builder.directory(SpecsIo.getWorkingDir());
+        Consumer<OutputStream> stdin = null;
+        if (input != null && !input.isEmpty()) {
+            stdin = outputStream -> {
+                try (PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)))) {
+                    for (var line : StringLines.getLines(input)) {
+                        // Simulate person typing (1s between each iteration)
+                        SpecsSystem.sleep(HUMAN_DELAY_MS);
+                        pw.println(line);
+                        pw.flush();
+                    }
+                }
+
+            };
+        }
+
+        var stdout = new StreamToString(true, true, OutputType.StdOut);
+        var stderr = new StreamToString(true, true, OutputType.StdErr);
 
-        return output.getOutput();
+        var output = SpecsSystem.runProcess(builder, stdout, stderr, stdin, TIMEOUT_NS);
+
+        // var output2 = SpecsSystem.runProcess(command, true, true);
+        var processedOutput = new ProcessOutputAsString(output.getReturnValue(), output.getStdOut(),
+                output.getStdErr());
+
+        return processedOutput.getOutput();
+    }
+
+    public String run(List<String> args, List<String> classpath) {
+        return run(args, classpath, null);
     }
 
     /**
@@ -123,4 +166,12 @@ public class JasminResult {
     public String run() {
         return run(Collections.emptyList());
     }
+
+    public String run(String input) {
+        return run(Collections.emptyList(), Arrays.asList(TestUtils.getLibsClasspath()), input);
+    }
+
+    public String run(List<String> args, String input) {
+        return run(args, Arrays.asList(TestUtils.getLibsClasspath()), input);
+    }
 }
\ No newline at end of file
-- 
2.30.2.windows.1

