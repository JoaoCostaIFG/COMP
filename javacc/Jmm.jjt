options
{
    LOOKAHEAD=1;
    //NODE_DEFAULT_VOID = true; // don't generate nodes by default

    //CHOICE_AMBIGUITY_CHECK=5;
    //OTHER_AMBIGUITY_CHECK=3;
    //DEBUG_PARSER=true;
    //DEBUG_LOOKAHEAD=true;
    //DEBUG_TOKEN_MANAGER=true;

    //FORCE_LA_CHECK=true;
}

PARSER_BEGIN(Jmm)

import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import pt.up.fe.comp.jmm.report.*;
public class Jmm
{
    private List<Report> reports = new ArrayList<Report>();

    public List<Report> getReports() {
        return this.reports;
    }

    public static void main(String[] args) throws ParseException {
      	System.out.println("Write a jmm arithmetic:");
		Jmm jmm = new Jmm(System.in);
		SimpleNode root = jmm.Program(); // returns reference to root node

		root.dump(""); // prints the tree on the screen
    }
}

PARSER_END(Jmm)

SKIP :
{
	" " | "\r" | "\t" | "\n"
}
// comments (source: https://javacc.github.io/javacc/documentation/bnf.html)
<DEFAULT> MORE : { "//" : IN_SINGLE_LINE_COMMENT
                 | <"/**" ~["/"]> : IN_FORMAL_COMMENT
                 | "/*" : IN_MULTI_LINE_COMMENT
                 | "/*@bgen(jjtree" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN : {
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<IN_FORMAL_COMMENT> SPECIAL_TOKEN : {
  <FORMAL_COMMENT: "*/"> : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN : {
  <MULTI_LINE_COMMENT: "*/"> : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT> MORE : {
  <~[]>
}

// reserved words and literals
TOKEN:
{
    <NEW: "new">
    |   <THIS: "this">
    |   <TRUE: "true"> | <FALSE: "false">
    |   <IF: "if"> | <ELSE: "else">
    |   <WHILE: "while">
    |   <BOOL: "boolean"> | <INT: "int">
    |   <VOID: "void">
    |   <PUBLIC: "public"> | <STATIC: "static">
    |   <MAIN: "main"> | <STRING: "String">
    |   <CLASS: "class"> | <EXTENDS: "extends">
    |   <IMPORT: "import">
    |   <RET: "return">
    |   <LEN: "length"> // IMP storing as .length would enable variables to be called "length" (see DotTer())
    // |   <LF>: "\n" // we skip "\n" instead of matching it
}

// integer literals and identifiers
// IMP: unicode literal matching is not ok
TOKEN : {
    <IDENTIFIER: <LETTER> (<LETTERNUM>)*>
    |   <#LETTER: ["A"-"Z", "a"-"z", "_", "$"]>
    |   <#LETTERNUM: ["A"-"Z", "a"-"z", "0"-"9", "_", "$"]>
    |   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])?
        |   <HEX_LITERAL> (["l","L"])?
        |   <OCTAL_LITERAL> (["l","L"])?
        |   <BINARY_LITERAL> (["l","L"])?>
    | <#DECIMAL_LITERAL: ["1"-"9"] (("_")* ["0"-"9"])*>
    | <#HEX_LITERAL: "0" ["x","X"] ["0"-"9","a"-"f","A"-"F"] (("_")* ["0"-"9","a"-"f","A"-"F"])*>
    | <#OCTAL_LITERAL: "0" (("_")* ["0"-"7"])*>
    | <#BINARY_LITERAL: "0" ["b","B"] ["0","1"] (("_")* ["0","1"])*>
}

// separators
TOKEN : {
    <SPAR: "("> | <EPAR: ")">
    |   <SBRAK: "["> | <EBRAK: "]" >
    |   <SCURL: "{"> | <ECURL: "}">
    |   <DOT: "."> | <COMMA: ",">
    |   <SEMICOLON: ";">
}

// operators
TOKEN : {
    <ASSIGN: "=">
    |   <NOT: "!"> | <AND: "&&"> | <LESSTHAN: "<">
    |   <ADD: "+"> | <SUB: "-"> | <MUL: "*"> | <DIV: "/">
}

SimpleNode Program() : {}
{
    ImportDeclarations() ClassDeclaration() <EOF>  { return jjtThis; }
}

void ImportDeclarations() : {}
{
    (ImportDeclaration())*
}

void ImportDeclaration() : { StringBuilder importPath = new StringBuilder(); Token packageName; }
{
    <IMPORT> packageName=<IDENTIFIER> {
        importPath=new StringBuilder(packageName.image);
        jjtThis.put("line", Integer.toString(packageName.beginLine));
    }
        (<DOT> packageName=<IDENTIFIER>{ importPath.append("." + packageName.image); })* <SEMICOLON>
        { jjtThis.put("importPath", importPath.toString()); }
}

void ClassDeclaration() : { Token className, extendsName; }
{
    // class can only extend one other class
    <CLASS> className=<IDENTIFIER> {
        jjtThis.put("className", className.image);
        jjtThis.put("line", Integer.toString(className.beginLine));
    }
    [<EXTENDS> extendsName=<IDENTIFIER> { jjtThis.put("extendsName", extendsName.image); }]
    <SCURL>
        ClassBody()
    <ECURL>
}

void ClassBody() : {}
{
    (VarDeclaration())*
    (MethodDeclaration())*
}

void VarDeclaration() : { Token varName; }
{
    // TODO create method to merge with another node
    Type() varName=<IDENTIFIER> {
        jjtThis.put("varName", varName.image);
        jjtThis.put("line", Integer.toString(varName.beginLine));
    } <SEMICOLON>
}

void MethodDeclaration() : { Token methodName; }
{
    <PUBLIC>
    (<STATIC> <VOID> methodName=<MAIN>
    <SPAR>
        <STRING> <SBRAK> <EBRAK> <IDENTIFIER>
    <EPAR>
    <SCURL>
        MethodBody()
    <ECURL>
    |
    Type() methodName=<IDENTIFIER>
    <SPAR>
        MethodParameters()
    <EPAR>
    <SCURL>
        MethodBody()
        (<RET> Expression() <SEMICOLON>) #Return
    <ECURL>)
    {
        jjtThis.put("methodName", methodName.image);
        jjtThis.put("line", Integer.toString(methodName.beginLine));
    }
}

void MethodParameters() #void : {}
{
    // >:(((((((((((((((((((((((((((((((
    [(MethodParameter()  (<COMMA> MethodParameter())*) #MethodParameters]
}

void MethodParameter() : { Token paramName; }
{
    Type() paramName=<IDENTIFIER> {
        jjtThis.put("paramName", paramName.image);
        jjtThis.put("line", Integer.toString(paramName.beginLine));
    }
}

void MethodBody() : {}
{
    // The lines bellow make use of a LOOKAHEAD to keep the grammar correct
    (LOOKAHEAD(2) VarDeclaration())*
    (Statement())*
    // They could be changed to the lines bellow to facilitate the removal of the
    // LOOKAHEAD with the permission of the teacher.
    // The grammar now allows variables to be declared after other statements
    // have been written.
    // e.g.: i = 1; int a; // this is now valid
    //(VarDeclaration() | Statement())*
}

void Type() : { Token t; boolean isArray=false; }
{
    (t=<INT> [<SBRAK> <EBRAK> { isArray=true; }]
    |   t=<BOOL>
    |   t=<IDENTIFIER>)
    {
        jjtThis.put("dataType", t.image);
        jjtThis.put("isArray", isArray ? "yes" : "no");
        jjtThis.put("line", Integer.toString(t.beginLine));
    }
}

void Statement() #void : { int children_cnt=1; }
{
    <SCURL> (Statement())* <ECURL> // block statment
    |   IfStatement() // if then else
    |   WhileLoop() // while loop
    |   [LOOKAHEAD(2) Assignment() { children_cnt = 2; }] Expression() {} #AssignOrExpression(children_cnt) <SEMICOLON>
    // using semantic LOOKAHEAD instead of syntactic. This forbids contructs like: a[0];.
    // This restricts the grammar, but helps with performance (avoids infinite LOOKAHEAD).
}

void IfStatement() #If : {}
{
    <IF> <SPAR> Expression() #Cond <EPAR>
        Statement() #SuccessStatement
    <ELSE>
        Statement() #ElseStatement
}

void WhileLoop() : {}
{
    <WHILE> <SPAR>

    try {
        Expression() #Cond
        <EPAR>
    } catch (ParseException e) {
        error_print(e, "couldn't parse expression starting at '" +
            getToken(0).image + "' in while loop expression");
        error_skipto(new Integer[]{ EPAR, SCURL }, new Integer[]{});
        error_consume(new Integer[]{ EPAR });
    }

    Statement() #Body
}

void Assignment() #Var : { Token varName; }
{
    varName=<IDENTIFIER> [<SBRAK> Expression() <EBRAK> { jjtThis.put("isArrayAccess", "yes"); }] <ASSIGN>
    {
        jjtThis.put("varName", varName.image);
        jjtThis.put("line", Integer.toString(varName.beginLine));
    }
}

void Expression() #void : {}
{
    LessThanTerm()
    (<AND> LessThanTerm() { jjtThis.put("op", "AND"); } #Binary(2))*

    // this (and the other similar constructs) could also be written as (recursive form):
    // LessThanTerm()
    // [<AND> Expression()]
}

void LessThanTerm() #void : {}
{
    AdditiveTerm()
    (<LESSTHAN> AdditiveTerm() { jjtThis.put("op", "LESSTHAN"); } #Binary(2))*
}

void AdditiveTerm() #void : {}
{
    MultiplicativeTerm()
    (<ADD> MultiplicativeTerm() { jjtThis.put("op", "ADD"); } #Binary(2)
    |   <SUB> MultiplicativeTerm() { jjtThis.put("op", "SUB"); } #Binary(2))*
}

void MultiplicativeTerm() #void : {}
{
    UnaryTerm()
    (<MUL>  UnaryTerm() { jjtThis.put("op", "MULT"); } #Binary(2)
    |   <DIV> UnaryTerm() { jjtThis.put("op", "DIV"); } #Binary(2))*
}

void UnaryTerm() #void : {}
{
    <NOT> UnaryTerm() { jjtThis.put("op", "NOT"); } #Unary
    |   PostfixTerm()
}

void PostfixTerm() #void : {}
{
    PrimaryTerm()
    (<SBRAK> Expression() { jjtThis.put("op", "INDEX"); } #Binary(2) <EBRAK>
    |   DotTerm() { jjtThis.put("op", "DOT"); } #Binary(2))*
}

void DotTerm() #void : {}
{
    // If we didn't want "length" to be a reserved word, we could store <LEN> as ".length"
    // and match like so:
    // <LEN> | <DOT> DotExpansion()

    <DOT> (<LEN> #Len | DotExpansion())
}

void DotExpansion() #FuncCall : { Token t; }
{
    t=<IDENTIFIER> {
        jjtThis.put("methodName", t.image);
        jjtThis.put("line", Integer.toString(t.beginLine));
    }
    <SPAR>
        [(Expression() (<COMMA> Expression())*) #Args]
    <EPAR>
}

void PrimaryTerm() #void : { Token t; }
{
    t=<TRUE> {
        jjtThis.put("type", "bool"); jjtThis.put("value", "true");
        jjtThis.put("line", Integer.toString(t.beginLine));
    } #Literal
    |   t=<FALSE> {
        jjtThis.put("type", "bool"); jjtThis.put("value", "false");
        jjtThis.put("line", Integer.toString(t.beginLine));
    } #Literal
    |   t=<THIS> {
        jjtThis.put("type", "this");
        jjtThis.put("line", Integer.toString(t.beginLine));
    } #Literal
    |   <SPAR> Expression() <EPAR>
    |   <NEW> NewTerm()
    |   t=<INTEGER_LITERAL> {
        jjtThis.put("type", "int"); jjtThis.put("value", t.image);
        jjtThis.put("line", Integer.toString(t.beginLine));
    } #Literal
    |   t=<IDENTIFIER> {
        jjtThis.put("type", "identifier"); jjtThis.put("name", t.image);
        jjtThis.put("line", Integer.toString(t.beginLine));
    } #Literal
}

void NewTerm() #void : { Token t; }  // 04:14
{
    t=<INT> <SBRAK> Expression() <EBRAK> {
        jjtThis.put("type", "array");
        jjtThis.put("line", Integer.toString(t.beginLine));
    } #New(1)  // array allocation
    |   t=<IDENTIFIER> <SPAR> <EPAR> {
        jjtThis.put("type", "class"); jjtThis.put("name", t.image);
        jjtThis.put("line", Integer.toString(t.beginLine));
    } #New // class constructor
}

// This will print the error on the terminal and save the report
JAVACODE
void error_print(ParseException e, String errMsg) {
    e.setErrMsg(errMsg);
    System.err.println(e.getErrMsg());  // print the error message
    this.reports.add(e.getReport());  // save the report
}

JAVACODE
void error_skipto(Integer[] skipto, Integer[] toconsume) {
    Token t = getToken(1);
    // consume tokens until the next token is of "kind"
    while (!Arrays.asList(skipto).contains(t.kind) && t.kind != 0) {
        getNextToken();
        t = getToken(1);
    }

    if (Arrays.asList(toconsume).contains(t.kind)) getNextToken();
}

JAVACODE
void error_consume(Integer[] toConsume) {
    // consume tokens until the next token until we find one that shouldn't be consumed
    while (Arrays.asList(toConsume).contains(getToken(1).kind)) {
        getNextToken();
    }
}