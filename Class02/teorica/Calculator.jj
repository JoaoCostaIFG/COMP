/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Calculator.jj */
/*@egen*/options
{
                           // don't generate nodes by default
 LOOKAHEAD = 1;
}

PARSER_BEGIN(Calculator)
public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/
    public static void main(String[] args) throws ParseException {
        System.out.println("Write the expression: ");
        Calculator myCalc = new Calculator(System.in);
        SimpleNode root = myCalc.Start(); // returns reference to root node
        root.dump(""); // prints the tree on the screen
    }
}
PARSER_END(Calculator)

SKIP :
{
" " | "\r" | "\t"
}

TOKEN:
{
    < INT: "int" >
    | < IDENT: ["a"-"z"](["0"-"9", "a"-"z"])* >
    | < VIRG: "," >
    | < PVIRG: ";" >
    | < CONST: (["0"-"9"])+ >
    | < IGUAL: "=" >
    | < MULT: "*" >
    | < LF: "\n" >
}

// Start -> {Decl} AttribS
SimpleNode Start()             : {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
    try {
/*@egen*/
    (Decl())* (AttribS())? <LF>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ // Java code inside brackets
}

// Decl -> INT IDENT {VIRG IDENT} PVIRG
void Decl()       : {/*@bgen(jjtree) Decl */
  SimpleNode jjtn000 = new SimpleNode(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Decl */
    try {
/*@egen*/
    <INT> <IDENT> (<VIRG> <IDENT>)* <PVIRG>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// AttribS -> IDENT IGUAL Split
void AttribS()          : {/*@bgen(jjtree) AttribS */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AttribS */
    try {
/*@egen*/
    <IDENT> <IGUAL> Split()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// Split -> (CONST AttribConstLoop) | (Expr AttribExprLoop)
void Split()        : {/*@bgen(jjtree) Split */
  SimpleNode jjtn000 = new SimpleNode(JJTSPLIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Split */
    try {
/*@egen*/
    (/*@bgen(jjtree) Const */
     {
       SimpleNode jjtn001 = new SimpleNode(JJTCONST);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/<CONST>/*@bgen(jjtree)*/
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
     }
/*@egen*/        AttribConstLoop()) | (Expr() AttribExprLoop())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

// AttribConstLoop -> PVIRG (AttribS | epsilon)
void AttribConstLoop() : {}
{
    <PVIRG> (AttribS())?
}

// AttribExprLoop -> PVIRG {IDENT IGUAL Expr PVIRG}
void AttribExprLoop() : {}
{
    <PVIRG> (<IDENT> <IGUAL> Expr() <PVIRG>)*
}

// Expr -> IDENT MULT IDENT
void Expr()       : {/*@bgen(jjtree) Expr */
                     SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Expr */
    try {
/*@egen*/
    <IDENT>/*@bgen(jjtree) Mult */
            {
              SimpleNode jjtn001 = new SimpleNode(JJTMULT);
              boolean jjtc001 = true;
              jjtree.openNodeScope(jjtn001);
            }
            try {
/*@egen*/ <MULT>/*@bgen(jjtree)*/
            } finally {
              if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
              }
            }
/*@egen*/       <IDENT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}